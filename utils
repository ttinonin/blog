<?php

require __DIR__ . "/vendor/autoload.php";

use App\Database\Migrations\MigrationsManager;

if(!isset($argv[1])) {
  fwrite(STDERR, "Error: Operation not provided!\n");
  fwrite(STDERR, "Usage: php utils <operation>\n");
  exit(1);
}

class Flags {
  private $flags = [];

  public function add($flag) {
    $argument = explode("=", $flag)[1];
    $key = str_replace("-", "", explode("=", $flag)[0]);

    $this->flags[$key] = $argument;
  }

  public function get($key) {
    if(isset($this->flags[$key])) {
      return $this->flags[$key];
    }
    
    return null;
  }
}

abstract class Builder {
  abstract public static function build($file_name);
}

class MiddlewareBuilder extends Builder {
  public static function build($file_name) {
    $path = __DIR__ . "/src/Routes/Middlewares/" . $file_name . ".php";
    $file = fopen($path, "w") or die("\033[31m Error creating the file \033[0m\n");
    $content = <<<PHP
    <?php

    namespace App\Routes\Middlewares;

    use App\Routes\Middlewares\Middleware;

    class $file_name extends Middleware {
        public function handle() {              
            return true;
        }
    }
    PHP;

    fwrite($file, $content);
    fclose($file);

    echo "\033[32m" . $file_name . " created with success at: " . $path . "\033[0m\n";
  }
}

class ModelBuilder extends Builder {
  public static function build($file_name) {
    $path = __DIR__ . "/src/Models/" . $file_name . ".php";
    $file = fopen($path, "w") or die("\033[31m Error creating the file \033[0m\n");
    $content = <<<PHP
    <?php

    namespace App\Models;

    use App\Models\Model;

    class $file_name extends Model {
        
    }
    PHP;

    fwrite($file, $content);
    fclose($file);

    echo "\033[32m" . $file_name . " created with success at: " . $path . "\033[0m\n";
  }
}

class ControllerBuilder extends Builder {
  public static function build($file_name) {
    $path = __DIR__ . "/src/Controllers/" . $file_name . ".php";
    $file = fopen($path, "w") or die("\033[31m Error creating the file \033[0m\n");
    $content = <<<PHP
    <?php

    namespace App\Controllers;

    use App\Controllers\Controller;

    class $file_name extends Controller {

    }
    PHP;

    fwrite($file, $content);
    fclose($file);

    echo "\033[32m" . $file_name . " created with success at: " . $path . "\033[0m\n";
  }
}

$flags = new Flags();

function builder($class, $file_name) {
  if(!isset($class)) {
    fwrite(STDERR, "Error: Class to build not provided!\n");
    fwrite(STDERR, "Usage: php utils build:<class_type> <file_name|class_name>\n");
    exit(1);
  }

  if(!isset($file_name)) {
    fwrite(STDERR, "Error: File name not provided!\n");
    fwrite(STDERR, "Usage: php utils build:$class <file_name|class_name>\n");
    exit(1);
  }

  switch($class) {
    case 'middleware':
      MiddlewareBuilder::build($file_name);
      break;
    case 'model':
      ModelBuilder::build($file_name);
      break;
    case 'controller':
      ControllerBuilder::build($file_name);
      break;
    default:
      die("\033[31m Error: Build operation not found. \033[0m\n");
      break;
  }
}

function migrate($operation, $manager) {
  switch($operation) {
    case 'run':
      $manager->run();
      break;
    case 'drop':
      $manager->drop();
      break;
    default:
      die("\033[31m Error: Migration operation not found. \033[0m\n");
      break;
  }
}

$operation = $argv[1];

$operation = explode(":", $operation);

function help() {
  echo <<<EOL
  PHP Utils v1.0.0
  
  Description:
    CLI to build files, manage migrations and run the development server.
  
  Build:
    build:middleware <class_name>  Create a middleware file with the given class name
    build:model <class_name>       Create a model file with the given class name
    build:controller <class_name>  Create a controller file with the given class name
  
  Migrate:
    migrate:run              Execute all migrations inside the MigrationsManager
    migrate:drop             Drop all tables inside the MigrationsManager
  
  Server:
    start                    Start the development server on localhost
  
  Examples:
    php utils.php start --port=8080
    php utils.php build:middleware AuthMiddleware
    php utils.php migrate:run
  
  EOL;
}

function get_flags() {
  global $flags;
  global $argv;

  foreach($argv as $argument) {
    if(!str_contains($argument, "--")) {
      continue;
    }

    switch($argument) {
      case "--help":
        help();
        exit();
        break;
      default:
        $flags->add($argument);
        break;
    }
  }
}

get_flags();

switch($operation[0]) {
  case 'migrate':
    $migrations_manager = new MigrationsManager();
    migrate($operation[1], $migrations_manager);
    break;
  case 'build':
    builder($operation[1], $argv[2]);
    break;
  case 'start':
    $host = $flags->get("host") ?? '127.0.0.1';
    $port = $flags->get("port") ?? '8000';
    
    echo "\033[32mStarting development server at http://$host:$port\033[0m\n";
    echo "Press Ctrl+C to stop the server\n";
    
    exec("php -S $host:$port -t public");
    break;
  default:
    die("\033[31m Error: Operation not found. \033[0m\n");
    break;
}
